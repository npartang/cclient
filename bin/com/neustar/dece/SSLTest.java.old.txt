package com.neustar.dece;

import java.io.*;
import java.net.*;
import javax.net.ssl.*;
import java.security.*;
import java.nio.*;
import java.util.*;
//import java.lang.*;


import java.security.KeyStore;
import java.security.cert.CertificateException;

//import org.apache.commons.*;
import javax.net.ssl.*;
//import org.apache.commons.httpclient.*;
//import org.apache.commons.httpclient.methods.*;
//import org.apache.commons.httpclient.params.HttpMethodParams;
//import org.apache.http.*;
//import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ssl.SSLSocketFactory;
//import org.apache.http.impl.client.DefaultHttpClient;
//import org.apache.http.util.EntityUtils;
import javax.net.SocketFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
//import org.apache.http.conn.ssl.*;


import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.Header;
import java.nio.channels.SocketChannel;
import org.apache.commons.httpclient.URI;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.*;
import org.apache.commons.httpclient.HostConfiguration;
import org.apache.commons.httpclient.HttpConnection;
import org.apache.commons.httpclient.protocol.*;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.conn.scheme.*;
//import org.apache.commons.logging.Log;
//import org.apache.commons.logging.LogFactory; 
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
@SuppressWarnings("serial")
public class SSLTest  {
 

 
@SuppressWarnings("deprecation")
public static void main (String args[])  {
		//static Logger log = Logger.getLogger(SSLTest.class);
		//String hostName = "10.31.152.136";
		//String hostName = "10.31.153.129";
		String hostName = "qa.p.uvvu.com";
		int port = 7001;
		File keyFile = new File("C:\\keystore\\decekeystore.jks");
		String keyStorePassword = "decetest";
		HttpConnection httpConn = null;

		System.out.println("invoking REST APIs");
		//test for invoking REST API
		
		String xmlData = null;

		//DefaultHttpClient httpclient = new DefaultHttpClient();

		// New technique

        HttpClient httpclient = new HttpClient();
        
        
       
        try {
  /*          
        	KeyStore trustStore  = KeyStore.getInstance(KeyStore.getDefaultType());
            FileInputStream instream = new FileInputStream(keyFile);
            try {
                trustStore.load(instream, keyStorePassword.toCharArray());
            } finally {
                try { instream.close(); } catch (Exception ignore) {}
            }*/
            //SSLConnect sslConnect = new SSLConnect();
            //javax.net.ssl.SSLSocketFactory sslFactory = sslConnect.createSocketFactory();
            //HostConfiguration hostConfig = new HostConfiguration();
            //hostConfig.setHost(hostName, port);
            //SLSocketFactory socketFactory =  new SSLSocketFactory(trustStore, keyStorePassword);

            
            //Scheme sch = new Scheme("https",  socketFactory, 7001);
            //httpConn = httpclient.getHttpConnectionManager().getConnection(hostConfig);
            //httpclient.getHttpConnectionManager().
        	
        	
        	
        	
        	SSLProtocolSocketFactory sslFactory=new SSLProtocolSocketFactory(keyFile.toURI().toURL(),keyStorePassword,keyStorePassword,false);

        	Protocol myhttps = new Protocol("https", sslFactory, port);
            Protocol.registerProtocol("https",new Protocol("https", sslFactory, port));            
            httpclient.getHostConfiguration().setHost(hostName, port, myhttps);
            //account create
            String url = "https://qa.p.uvvu.com:"+port+"/rest/1/0/Provision/Account";
            xmlData = FileUtils.getFileContents("C:\\java\\QASAMLTEST\\SSLTest\\src\\com\\neustar\\dece\\accountcreate.xml");
            PostMethod httppost = CreateRequest.getPostRequest(url, xmlData, httpclient);
            httpclient.executeMethod(httppost);  
            CreateRequest.printResponse(httppost);
            httppost.releaseConnection();
            System.out.println("completed account create");                        
            //first user create
            url = httppost.getResponseHeader("Location").getValue()+ "/FirstUser";
            url = url.replace(".q", ".p");
            url = url.replace("/rest/1/0/Account", "/rest/1/0/Provision/Account");
            System.out.println("first user create URL:" + url);
            xmlData = FileUtils.getFileContents("C:\\java\\QASAMLTEST\\SSLTest\\src\\com\\neustar\\dece\\usercreate.xml");
            System.out.println(xmlData);
            httppost = httppost = CreateRequest.getPostRequest(url, xmlData, httpclient);           
            httpclient.executeMethod(httppost);   
            CreateRequest.printResponse(httppost);
            httppost.releaseConnection();


/*            HttpGet httpget = new HttpGet("https://localhost/");

            System.out.println("executing request" + httpget.getRequestLine());

            HttpResponse httpResponse = httpclient.execute(httpget);
            HttpEntity entity = httpResponse.getEntity();

            System.out.println("----------
            ------------------------------");
            System.out.println(httpResponse.getStatusLine());
            if (entity != null) {
                System.out.println("Response content length: " + entity.getContentLength());
            }
            //EntityUtils.consume(entity);
*/            
		//}catch (KeyManagementException e) {
			//e.printStackTrace();
		//} //catch (UnrecoverableKeyException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		//} catch (NoSuchAlgorithmException e) {
			//log.log(Level.FATAL,"DeceClientSSLProtocolSocketFactory::createSocket:No Such Algorith Exception",e);
		//	e.printStackTrace();
		//} catch (KeyStoreException e) {
			//log.log(Level.FATAL,"DeceClientSSLProtocolSocketFactory::createSocket:Key Store Exception",e);
		//	e.printStackTrace();
		//} catch (CertificateException e) {
			//log.log(Level.FATAL,"DeceClientSSLProtocolSocketFactory::createSocket:Certificate Exception",e);
		//	e.printStackTrace();
        	
        	
        	
/*		
    		SSLConnect sslConnect = new SSLConnect(); 
    		SSLSocket socket = sslConnect.createSocket(hostName, port);
    		System.out.println("Established connection");
    		System.out.println(socket.isBound());
    		System.out.println(socket.getInetAddress());

    		
    	    System.out.println("Server handshake completed");
    		BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF8"));
    		wr.write(xmlData);
    		wr.flush();
    		//response
    		String line;
    		BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    		System.out.println("rd=" + rd.toString());
    	    while ((line = rd.readLine()) != null) {
    	        System.out.println(line);
    	    }
    	    System.out.println("Server handshake completed");
    	    wr.close();
    	    rd.close();	
*/    	

		}catch (IOException e){
			e.printStackTrace();
		}

        finally {
            // When HttpClient instance is no longer needed,
            // shut down the connection manager to ensure
            // immediate deallocation of all system resources
        	
        }
 
 //New technique ends
		
/*		
		SSLConnect sslConnect = new SSLConnect(); 
		SSLSocket socket = (SSLSocket)sslConnect.createSocket(hostName, port);
		System.out.println("Established connection");
		System.out.println(socket.isBound());
		System.out.println(socket.getInetAddress());

		//Socket socket = sslSocket.accept();
	    System.out.println("Server handshake completed");
		BufferedWriter wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF8"));
		wr.write(xmlData);
		wr.flush();
		//response
		String line;
		BufferedReader rd = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		System.out.println("rd=" + rd.toString());
	    while ((line = rd.readLine()) != null) {
	        System.out.println(line);
	    }
	    System.out.println("Server handshake completed");
	    wr.close();
	    rd.close();	
*/	


	} 
}